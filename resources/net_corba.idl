/*
 * This file is part of the libpgrid project.
 *
 * Copyright (c) 2011. Vourlakis Nikolas. All rights reserved.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

module pgrid {
    module entity {
        module com {
            module corba {

                struct PeerReference {
                    string address;
                    long port;
                    string path;
                    long long timestamp;
                    string uuid;
                  };

                typedef sequence<PeerReference> RoutingTable;
                typedef sequence<octet> ByteStream;

                struct BasicMessage {
                    long type;
                    ByteStream payload;
                };

                struct RoutedMessage {
                    string uuid;
                    PeerReference source;
                    string keyDestination;
                    long hops;
                    BasicMessage basicMessage;
                };

                interface NodeHandle {
                    readonly attribute PeerReference peer;
                    readonly attribute RoutingTable routingTable;

                    /**************** DATA TRANSFER **************************/
                    void route(in RoutedMessage msg);
                    void send(in BasicMessage msg);

                    /**************** LOOKUP *********************************/
                    PeerReference lookup(in string key, in long long timeout);

                    /**************** MAINTENANCE ****************************/
                    void updateInfo(in PeerReference peer);
                    void exchange(in PeerReference peer, in RoutingTable peerRT);
                    void fixNode(in PeerReference failed, in string path);
                    void replace(in PeerReference failed);
                    PeerReference getFailedPeer();
                    void addSolutionListener();
                    void solutionNotify(in PeerReference replacer, in PeerReference conjugate);
                };

            };
        };
    };
};
