/*
 * This file is part of the libpgrid project.
 *
 * Copyright (c) 2011. Vourlakis Nikolas. All rights reserved.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

module pgrid {
    module service {
        module spi {
            module corba {
                struct PeerReference {
                    string address;
                    long port;
                    string path;
                    long long timestamp;
                    string uuid;
                };

                typedef sequence<PeerReference> PeerArray;
                typedef sequence<PeerArray> References;

                struct CorbaRoutingTable {
                    References refs;
                    PeerReference peer;
                };

                module exchange {
                    interface ExchangeHandle {
                        readonly attribute CorbaRoutingTable routingTable;

                        void exchange(in CorbaRoutingTable routingTable);
                    };
                }; // end module exchange

                module repair {
                    struct RepairIssue {
                        string repairID;
                        PeerReference failedPeer;
                        string failedPeerPath;
                        string footpath;
                    };

                    struct RepairSolution {
                        string repairID;
                        string failedPeerPath;
                        sequence<PeerReference> failedPeer;
                        PeerReference replacerPeer;
                        PeerReference twinPeer;
                    };

                    interface RepairHandle {
                        void fixNode(in RepairIssue issue);
                        void replace(in RepairIssue issue);
                        void propagate(in RepairSolution solution);
                    };
                }; // end module repair

            }; // end module corba
        }; // end module spi
    }; // end module service
}; // end module pgrid
