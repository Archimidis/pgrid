/*
 * This file is part of the libpgrid project.
 *
 * Copyright (c) 2011. Vourlakis Nikolas. All rights reserved.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

module pgrid {
    module service {
        module corba {
            struct PeerReference {
                string address;
                long port;
                string path;
                long long timestamp;
                string uuid;
            };

            typedef sequence<PeerReference> PeerArray;
            typedef sequence<PeerArray> References;
            typedef sequence<string> StringArray;

            struct CorbaRoutingTable {
                References refs;
                PeerReference peer;
            };

            module exchange {
                interface ExchangeHandle {
                    readonly attribute CorbaRoutingTable routingTable;

                    void exchange(in CorbaRoutingTable routingTable);
                };
            }; // end module exchange

            module repair {
                enum IssueState {
                    PENDING,
                    SOLVED,
                    BROADCASTED
                };

                struct RepairIssue {
                    IssueState issueState;
                    PeerReference failedPeer;
                };

                struct RepairSolution {
                    StringArray uuidSent;
                    long pushCount;
                    PeerArray failedHosts;
                    PeerArray updatedHosts;
                    string failedPath;
                };

                interface RepairHandle {
                    typedef sequence<RepairIssue> IssueArray;

                    void fixNode(in string footpath, in RepairIssue issue);
                    void fixSubtree(in string footpath, in string subtreePrefix, in IssueArray issues);

                    PeerReference replace(in string failedPath, in IssueArray issues);

                    void pushSolution(in RepairSolution solution);
                };
            }; // end module repair

            module simulation {
                interface SimulationHandle {
                    oneway void die();
                    oneway void terminateSimulation();
                };
            }; // end module simulation
        }; // end module corba
    }; // end module service
}; // end module pgrid
