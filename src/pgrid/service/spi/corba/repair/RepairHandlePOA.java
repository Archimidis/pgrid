/*
 * This file is part of the pgrid project.
 *
 * Copyright (c) 2012. Vourlakis Nikolas. All rights reserved.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

package pgrid.service.spi.corba.repair;


/**
 * pgrid/service/spi/corba/repair/RepairHandlePOA.java .
 * Generated by the IDL-to-Java compiler (portable), version "3.2"
 * from C:/Users/user/Desktop/DIPLOMATIKH_NIKOLA/libpgrid/resources/pgrid_corba.idl
 */

public abstract class RepairHandlePOA extends org.omg.PortableServer.Servant
        implements pgrid.service.spi.corba.repair.RepairHandleOperations, org.omg.CORBA.portable.InvokeHandler {

    // Constructors

    private static java.util.Hashtable _methods = new java.util.Hashtable();

    static {
        _methods.put("fixNode", new java.lang.Integer(0));
        _methods.put("replace", new java.lang.Integer(1));
        _methods.put("propagate", new java.lang.Integer(2));
    }

    public org.omg.CORBA.portable.OutputStream _invoke(String $method,
                                                       org.omg.CORBA.portable.InputStream in,
                                                       org.omg.CORBA.portable.ResponseHandler $rh) {
        org.omg.CORBA.portable.OutputStream out = null;
        java.lang.Integer __method = (java.lang.Integer) _methods.get($method);
        if (__method == null)
            throw new org.omg.CORBA.BAD_OPERATION(0, org.omg.CORBA.CompletionStatus.COMPLETED_MAYBE);

        switch (__method.intValue()) {
            case 0:  // pgrid/service/spi/corba/repair/RepairHandle/fixNode
            {
                pgrid.service.spi.corba.repair.RepairIssue issue = pgrid.service.spi.corba.repair.RepairIssueHelper.read(in);
                this.fixNode(issue);
                out = $rh.createReply();
                break;
            }

            case 1:  // pgrid/service/spi/corba/repair/RepairHandle/replace
            {
                pgrid.service.spi.corba.repair.RepairIssue issue = pgrid.service.spi.corba.repair.RepairIssueHelper.read(in);
                this.replace(issue);
                out = $rh.createReply();
                break;
            }

            case 2:  // pgrid/service/spi/corba/repair/RepairHandle/propagate
            {
                pgrid.service.spi.corba.repair.RepairSolution solution = pgrid.service.spi.corba.repair.RepairSolutionHelper.read(in);
                this.propagate(solution);
                out = $rh.createReply();
                break;
            }

            default:
                throw new org.omg.CORBA.BAD_OPERATION(0, org.omg.CORBA.CompletionStatus.COMPLETED_MAYBE);
        }

        return out;
    } // _invoke

    // Type-specific CORBA::Object operations
    private static String[] __ids = {
            "IDL:pgrid/service/spi/corba/repair/RepairHandle:1.0"};

    public String[] _all_interfaces(org.omg.PortableServer.POA poa, byte[] objectId) {
        return (String[]) __ids.clone();
    }

    public RepairHandle _this() {
        return RepairHandleHelper.narrow(
                super._this_object());
    }

    public RepairHandle _this(org.omg.CORBA.ORB orb) {
        return RepairHandleHelper.narrow(
                super._this_object(orb));
    }


} // class RepairHandlePOA
